
//@ts-check
//react-cool-ticker by Ian Macharia
import React, {useState, useEffect} from 'react';

type Size = 'tiny' | 'small' | 'medium' | 'large' | 'massive' | 'hero' | 'gigantic'
type TickerBlobStyle = {name:'blob'}
type TickerGradientStyle = {name: 'gradient',gradient:string}
type TickerImageStyle = {name:'image',src:string}
type TickerPopStyle = {name:'pop'}
type TickerStyle = 
    | TickerBlobStyle
    | TickerGradientStyle
    | TickerImageStyle
    | TickerPopStyle

//cubic-bezier(.95,.05,.8,.04) - suspense
//cubic-bezier(.68,-0.55,.27,1.55) - bounce
//cubic-bezier(.18,.89,.32,1.28) - overshoot
//cubic-bezier(1,0,0,1) - fast
    
interface IProps {
    staticText: string | number,
    movingText: string[] | number[],
    showBorder?: boolean,
    size: Size,
    rounded?:boolean,
    tickerStyle?:TickerStyle,
    showIcon?: boolean,
    interval: number,
    onTickerPress?: () => void
}

const sizeMap: Record<Size, [string,string]> = {
    tiny: ['text-xs', '1.6rem'],
    small: ['text-sm', '2.0rem'],
    medium: ['text-base', '2.4rem'],
    large: ['text-lg', '2.4rem'],
    massive: ['text-3xl', '3.2rem'],
    hero: ['text-4xl', '3.6rem'],
    gigantic: ['text-8xl', '4.8rem'],
}
//tiny - 1.6
//small - 2.0
//medium - 2.4
//large - 2.4
//massive - 3.2
//hero - 3.6
//gigantic - 4.8

const generateTickerStyle = (style:TickerStyle) => {
    switch(style.name){
        case 'gradient':
            return {
            background:style.gradient,
            backgroundClip:'text',
            WebkitBackgroundClip:'text',
            WebkitTextFillColor:'transparent'
        }
        case 'image':
            return {
            background:`url(${style.src})`,
            backgroundRepeat:'no-repeat',
            backgroundSize:'cover',
            backgroundClip:'text',
            WebkitBackgroundClip:'text',
            WebkitTextFillColor:'transparent'
        }
    }
}

const Ticker = (props: IProps) => {
    const [tickerIndex, setTickerIndex] = useState(0)
    const [tickerTranslate, setTickerTranslate] = useState(0)
    let interval: number | null = null
    useEffect(() => {
        interval = setInterval(() => {
            if (tickerIndex >= props.movingText.length - 1) {
                setTickerTranslate(0)
                setTickerIndex(0)
            } else {
                setTickerIndex(tickerIndex + 1)
                setTickerTranslate(tickerIndex * 100 / props.movingText.length)
            }
        }, props.interval)
        return (() => {interval && clearInterval(interval)})
    }, [props.interval, tickerIndex, tickerTranslate])

    return (
        <div onClick={props.onTickerPress}
            className="flex justify-center cursor-pointer top md:block">
            <div className="flex">
                <span
                    style={{maxHeight: sizeMap[props.size][1]}}
                className={`relative inline-flex px-3 pl-6 mr-0 overflow-hidden text-gray-800 bg-white 
                    ${props.showBorder ? 'border-2' : ''} border-orange-500
                    ${sizeMap[props.size][0] || 'text-sm'} ${props.rounded ? 'rounded-l-full' : ''} ${!props.showIcon && props.rounded
                            ? 'rounded-r-full' : ''}  outline-none whitespace-nowrap font-body focus:shadow-outline`}>
                    <div className="pt-1" style={{height: '100%'}}>
                        {props.staticText}
                    </div>
                    <div
                        style={{height: `calc(100% * ${props.movingText.length})`}}
                        className="relative flex flex-col px-1 pl-4 overflow-hidden text-left transform">
                        <div style={{transform: `translateY(-${tickerTranslate}%)`}}
                            className={`select-none flex flex-col transition-all duration-500 ease-in-out`}>
                            {props.movingText.map(text => {
                                return (
                                    <strong
                                        key={text}
                                        className={`${sizeMap[props.size][0] || 'text-sm'} pt-1 flex items-center overflow-hidden whitespace-nowrap`}
                                    style={{
                                        textOverflow: 'ellipsis',
                                     ...(props?.tickerStyle?.name ? generateTickerStyle(props.tickerStyle) : {})
                                    }}>{text}</strong>)
                            })}
                        </div>
                    </div>
                </span>
                {props.showIcon ? <button style={{background: '#fda801'}}
                    className="px-2 py-3 -ml-1 text-xs font-bold text-gray-800 uppercase rounded-r-full md:px-5">
                    {
                        // <Feather
                        //     className="inline mx-auto"
                        //     icon="search"
                        //     color="white" size={17} />
                        //     strokeWidth={5}

                    }
                </button> : null
                }            </div>
        </div>
    )
}

export default function ReactCoolTicker(props: any) {
    return (
        <div className="flex items-center justify-center h-full overflow-hidden ">
            <Ticker
            // tickerStyle={{name:'gradient',gradient:'linear-gradient(45deg,rebeccapurple,pink)'}}
            tickerStyle={{name:'image',src:"https://upload.wikimedia.org/wikipedia/commons/2/22/Animated_fire_by_nevit.gif"}}
            staticText="May the force be with"
            size="gigantic"
                movingText={[
                    'Obi Wan', 'Princess Leia', 'Luke Skywalker', 'Lando', 'Han Solo', 'Darth Binks',
                    'Obi Wan', 'Princess Leia', 'Luke Skywalker', 'Lando', 'Han Solo', 'Darth Binks',
                    'Obi Wan', 'Princess Leia', 'Luke Skywalker', 'Lando', 'Han Solo', 'Darth Binks',


                ]}
                interval={1500}
                onTickerPress={() => {}} />
        </div >
    )
}

